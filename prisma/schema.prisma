generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id              String   @id @default(cuid())
  title           String   @db.VarChar(255)
  summary         String   @db.VarChar(5000)
  
  projectType     String   @db.VarChar(5) @default("solo")
  projectPrivacy  String   @db.VarChar(10) @default("private")

  status          String   @db.VarChar(255)@default("")

  createdAt       DateTime @default(now())
  endDate         DateTime @default(now())

  coverImageUrl   String   @default("") @db.VarChar(255)
  

  //Relations
  authorID        String
  riples          Riple[]  // This establishes the one-to-many relation
  members         ProjectMembers[] 
  tasks           Tasks[] 
  followers       ProjectFollowers[] 

  @@index([authorID])
}

model ProjectFollowers {
  id           String  @id @default(cuid())

  //Relations
  projectId    String 
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@index([projectId])
  @@index([userId])
}

model Riple {
  id        String  @id @default(cuid())
  title     String  @db.VarChar(255)
  content   String  @db.Text
  createdAt DateTime @default(now())

  //Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id],  onDelete: Cascade)
  authorID  String

  @@index([projectId])
}

model ProjectMembers {
  id           String  @id @default(cuid())
  status       String  @db.VarChar(255)

  //Relations
  projectId    String 
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userID       String 
  user         User @relation(fields: [userID], references: [id], onDelete: Cascade) 

  @@index([projectId])
  @@index([userID])
  @@unique([projectId, userID])
}

model Tasks {
  id           String  @id @default(cuid())
  status       String  @db.VarChar(255) @default("To-Do")
  title        String  @db.VarChar(255)
  content      String  @db.VarChar(10000)
  createdById  String  //userId
  createdAt    DateTime @default(now())
  editedAt     DateTime @default(now())

  // Relations
  ownerId      String  @default("")
  projectId    String  
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subTasks     SubTasks[]

  @@index([projectId])
}

model SubTasks {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(255)
  status      Boolean @default(false) // You could use a boolean to represent status; false for To-Do, true for Done

  // Relations
  taskId      String
  task        Tasks   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}



// CHECK NEXT AUTH BEFORE MODIFYING
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //My User Fields
  username          String  @unique @db.VarChar(255)@default("")
  password          String  @db.VarChar(255)@default("")
  following         ProjectFollowers[] 
  member            ProjectMembers[] 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}