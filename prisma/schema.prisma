generator client {
  provider = "prisma-client-js"
}

//generator erd {
//  provider = "prisma-erd-generator"
//  output = "./ERD.svg"
//}


datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}



model Project {
  id              String   @id @default(cuid())
  title           String   @db.VarChar(255)
  summary         String   @db.VarChar(5000)
  
  projectType     String   @db.VarChar(6) @default("solo")
  projectPrivacy  String   @db.VarChar(10) @default("private")

  status          String   @db.VarChar(255)@default("To-Do")

  createdAt       DateTime @default(now())
  endDate         DateTime @default(now())

  coverImageUrl   String   @default("https://t3-portofolio.s3.us-east-2.amazonaws.com/mvp_riples/Riple_bannner.png") @db.VarChar(255)
  coverImageId    String   @default("https://riples-public-images-08453786.s3.us-west-2.amazonaws.com/project-cover-images/default/Riple_bannner.png") @db.VarChar(255)
  
  //Relations
  authorID        String
  riples          Riple[]  
  owner           User    @relation("ProjectOwner", fields: [authorID], references: [id], onDelete: Cascade)
  members         ProjectMembers[] 
  tasks           Tasks[] 
  goals           Goals[] 
  followers       ProjectFollowers[] 
  tags            ProjectTags[]

  @@index([authorID])
}

model ProjectTags {
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@id([tagId, projectId])
}

model UserInterestTags {
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([tagId, userId])
}


model Tasks {
  id           String  @id @default(cuid())
  status       String  @db.VarChar(255) @default("To-Do")
  title        String  @db.VarChar(255)
  content      String  @db.VarChar(10000)
  createdById  String  //userId
  createdAt    DateTime @default(now())
  editedAt     DateTime @default(now())

  // Relations
  ownerId      String  @default("")
  projectId    String  
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subTasks     SubTasks[]

  @@index([projectId])
}

model Goals {
  id           String  @id @default(cuid())
  title        String  @db.VarChar(255)
  createdById  String  //userId
  createdAt    DateTime @default(now())
  editedAt     DateTime @default(now())
  progress     Int @default(0)
  progressFinalValue     Int @default(100)
  status       String @default("todo")
  notes        String @db.VarChar(10000)@default("")

  // Relations
  projectId    String  
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Tag {
    id       String        @id @default(cuid())
    name     String        @unique
    projects ProjectTags[]
    users    UserInterestTags[]
}


model Riple {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  createdAt DateTime @default(now())
  ripleType String   @default("update")

  //Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id],  onDelete: Cascade)
  authorID  String?  // Making this field nullable
  author    User?    @relation(fields: [authorID], references: [id], onDelete: SetNull)
  like      Like[]
  comment   Comment[]
  @@index([projectId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  
  //Relations
  ripleId   String
  riple     Riple @relation(fields: [ripleId], references: [id],  onDelete: Cascade)
  authorID  String?  // Making this field nullable
  author    User?    @relation(fields: [authorID], references: [id], onDelete: SetNull)
  @@index([ripleId])
}


model ProjectMembers {
  id           String  @id @default(cuid())
  status       String  @db.VarChar(255)

  //Relations
  projectId    String 
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userID       String 
  user         User @relation(fields: [userID], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) 

  @@index([projectId])
  @@index([userID])
  @@unique([projectId, userID])
}


model ProjectFollowers {
  id           String  @id @default(cuid())

  //Relations
  projectId    String 
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())  

  @@index([projectId])
  @@index([userId])
}

model SubTasks {
  id           String  @id @default(cuid())
  title        String  @db.VarChar(255)
  content      String  @db.VarChar(10000)@default("")
  status       Boolean @default(false) // You could use a boolean to represent status; false for To-Do, true for Done
  createdAt    DateTime @default(now())
  editedAt     DateTime @default(now())

  // Relations
  taskId      String
  task        Tasks   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}



// CHECK NEXT AUTH BEFORE MODIFYING
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //My User Fields
  username            String? @unique @db.VarChar(255)
  onBoardingFinished  Boolean @default(false)  // depreciated delete in next clean up
  productTourFinished Boolean @default(false)  // depreciated delete in next clean up
  password            String  @db.VarChar(255)@default("")
  createdAt           DateTime @default(now())
  description         String @db.VarChar(10000)@default("")

  // Relations
  following           ProjectFollowers[] 
  tags                UserInterestTags[]
  member              ProjectMembers[]
  riples              Riple[] 
  ownedProjects       Project[] @relation("ProjectOwner")
  userOnboarding      UserOnboarding? 
  logs                UserLog[]
  notifications       Notification[]
  comments            Comment[]
  like                Like[]
  AIUsageLog          AIUsageLog[]
}


model UserOnboarding {
  id                  String  @id @default(cuid())
  user                User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String  @unique 
  
  onBoardingFinished  Boolean @default(false)
  productTourFinished Boolean @default(false)
  stepOneCompleted    Boolean @default(false)
  stepTwoCompleted    Boolean @default(false)
  stepThreeCompleted  Boolean @default(false)
  stepFourCompleted   Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserLog {
  id                 String   @id @default(cuid())
  user               User?     @relation(fields: [userId], references: [id])
  userId             String   
  date               DateTime @default(now())
  lastLogin          DateTime?
  lastProjectCreated DateTime?
  lastTaskEdited     DateTime?
  lastLikedEntry     DateTime?
  lastRiple     DateTime?

  @@unique([userId, date])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  content     String
  link        String?  // Where the user should be directed when they click the notification
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Like {
    id          String   @id @default(cuid())
    ripleId     String
    userId      String
    createdAt   DateTime @default(now())

    riple       Riple  @relation(fields: [ripleId], references: [id])
    user        User   @relation(fields: [userId], references: [id])

    @@unique([ripleId, userId])
}

model AIUsageLog {
    id          String   @id @default(cuid())
    features    String
    userId      String
    timeStamp   DateTime @default(now())

    user        User   @relation(fields: [userId], references: [id])
}
